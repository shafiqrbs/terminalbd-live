<?php

namespace Appstore\Bundle\HumanResourceBundle\Repository;
use Appstore\Bundle\HumanResourceBundle\Entity\EmployeePayroll;
use Appstore\Bundle\HumanResourceBundle\Entity\EmployeePayrollParticular;
use Appstore\Bundle\HumanResourceBundle\Entity\Payroll;
use Appstore\Bundle\HumanResourceBundle\Entity\PayrollSheet;
use Core\UserBundle\Entity\User;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * PayrollSheetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PayrollSheetRepository extends \Doctrine\ORM\EntityRepository
{
    public function getPayrollEmployee($option)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.employee','u');
        $qb->join('u.profile','p');
        $qb->leftJoin('p.designation','d');
        $qb->select('e.id as id');
        $qb->addSelect('d.name as designationName');
        $qb->addSelect('p.name as name','p.mobile as mobile','p.joiningDate');
        $qb->where("e.globalOption =".$option);
        $qb->andWhere('e.domainOwner = 2');
        $qb->andWhere('e.isDelete != 1');
        $qb->orderBy("p.name","ASC");
        $result = $qb->getQuery()->getResult();
        return $result;


    }



    public function insertUpdateParticular(Payroll $payroll)
    {
        $em = $this->_em;

        $employees = $em->getRepository('HumanResourceBundle:EmployeePayroll')->getPayrollEmployeeGroup($payroll);

        /* @var $employee EmployeePayroll */

        foreach ($employees as $employee):

            if(!empty($employee)){

                $allowance = $em->getRepository('HumanResourceBundle:EmployeePayroll')->getAllowanceDeductionParticular($employee->getId(),'allowance');
                $deduction = $em->getRepository('HumanResourceBundle:EmployeePayroll')->getAllowanceDeductionParticular($employee->getId(),'deduction');

                $allowanceAmount = $em->getRepository('HumanResourceBundle:EmployeePayroll')->getAllowanceDeduction($employee->getId(),'allowance');
                $deductionAmount = $em->getRepository('HumanResourceBundle:EmployeePayroll')->getAllowanceDeduction($employee->getId(),'deduction');



                $exist = $this->findOneBy(array('payroll' => $payroll,'employee' => $employee));

                if(!empty($exist)){

                    /* @var $exist PayrollSheet */

                    if($payroll->isBonusApplicable()){
                        $amount = $this->calculateAmount($employee->getBasicAmount(),$employee->getBonusPercentage());
                        $exist->setBonusAmount($amount);
                    }
                    if($payroll->isArearApplicable() and $employee->getArearAmount() > 0){
                        $exist->setArearAmount($employee->getArearAmount());
                    }
                    if($employee->getLoanInstallment() > 0 and $employee->getLoanAmount()){
                        $exist->setLoanInstallment($employee->getLoanInstallment());
                    }
                    if($employee->getAdvanceAmount() > 0){
                        $exist->setAdvanceAmount($employee->getAdvanceAmount());
                    }
                    $exist->setBasicAmount($employee->getBasicAmount());
                    $exist->setParticularAllowance($allowance);
                    $exist->setParticularDeduction($deduction);
                    $em->persist($exist);
                    $em->flush();

                }else{

                    $entity = new PayrollSheet();
                    $entity->setPayroll($payroll);
                    $entity->setEmployee($employee);
                    if($payroll->isBonusApplicable()){
                        $amount = $this->calculateAmount($employee->getBasicAmount(),$employee->getBonusPercentage());
                        $entity->setBonusAmount($amount);
                    }
                    if($payroll->isArearApplicable() and $employee->getArearAmount() > 0){
                        $entity->setArearAmount($employee->getArearAmount());
                    }
                    if($employee->getLoanInstallment() > 0 and $employee->getLoanAmount()){
                        $entity->setLoanInstallment($employee->getLoanInstallment());
                    }
                    if($employee->getAdvanceAmount() > 0){
                        $entity->setAdvanceAmount($employee->getAdvanceAmount());
                    }
                    $entity->setAllowanceAmount($allowanceAmount);
                    $entity->setDeductionAmount($deductionAmount);
                    $entity->setBasicAmount($employee->getBasicAmount());
                    $entity->setParticularAllowance($allowance);
                    $entity->setParticularDeduction($deduction);
                    $em->persist($entity);
                    $em->flush();
                }
            }
        endforeach;
        $this->updatePayrollGenerateSummary($payroll) ;
    }

    public function updatePayrollGenerateSummary(Payroll $payroll){

        $em = $this->_em;
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.basicAmount) as basicAmount','SUM(e.bonusAmount) as bonusAmount','SUM(e.arearAmount) as arearAmount','SUM(e.loanInstallment) as loanAmount','SUM(e.advanceAmount) as advanceAmount','SUM(e.allowanceAmount) as allowanceAmount','SUM(e.deductionAmount) as deductionAmount');
        $qb->where("e.id ={$payroll->getId()}");
        $result = $qb->getQuery()->getOneOrNullResult();
        $payroll->setBasicAmount($result['basicAmount']);
        $payroll->setAllowanceAmount($result['allowanceAmount']);
        $payroll->setDeductionAmount($result['deductionAmount']);
        $payroll->setBonusAmount($result['bonusAmount']);
        $payroll->setArearAmount($result['arearAmount']);
        $payroll->setLoanReceive($result['loanAmount']);
        $payroll->setAdvanceAmount($result['advanceAmount']);
        $em->flush();

    }

    private function calculateAmount($basic,$unit){

        $amount = (($basic * $unit)/100);
        return $amount;
    }

    public function insertUpdate(EmployeePayroll $payroll)
    {
        $allowance = $this->getAllowanceDeduction($payroll->getId(),'allowance');
        $deduction = $this->getAllowanceDeduction($payroll->getId(),'deduction');

        $em = $this->_em;
        $payroll->setAllowanceAmount($allowance);
        $payroll->setDeductionAmount($deduction);
        $amount = ($payroll->getBasicAmount() + $allowance);
        $payroll->setTotalAmount($amount);
        if($payroll->isBonusApplicable() == 1){
            $payroll->setBonusAmount($this->calculateAmount($payroll->getBasicAmount(),$payroll->getBonusPercentage()));
        }
        $payable = (($payroll->getTotalAmount() + $payroll->getArearAmount() + $payroll->getBonusAmount()) - ($deduction + $payroll->getLoanInstallment() + $payroll->getAdvanceAmount()));
        $payroll->setPayableAmount($payable);
        $em->persist($payroll);
        $em->flush();

    }

    public function getAllowanceDeduction( $payroll,$mode)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.employeePayrollParticulars','p');
        $qb->select('SUM(p.amount) as amount');
        $qb->where("e.id ={$payroll}");
        $qb->andWhere("p.mode ='{$mode}'");
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result['amount'];
    }


}